{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["NewTodo","onSubmit","useState","value","setValue","className","ev","preventDefault","length","type","name","placeholder","autoComplete","onChange","target","trim","TodoItem","todo","onToggle","onDelete","title","id","completed","isEditing","setIsEditing","key","classNames","editing","checked","onDoubleClick","onClick","onKeyUp","onBlur","changedTodo","TodoList","todos","map","TodosFilter","handleShowAll","handleShowActive","handleShowCompleted","isAllSelected","setIsAllSelected","isActiveSelected","setIsActiveSelected","isCompletedSelected","setIsCompletedSelected","href","App","initValue","JSON","parse","localStorage","getItem","newValue","setItem","stringify","useLocalStorage","setTodos","isAllCompleted","setIsAllCompleted","filteredTodos","setFilteredTodos","isFiltered","setIsFiltered","todoText","Date","htmlFor","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8b49335.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = (ev) => {\n    setValue(ev.target.value.trim());\n  };\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n\n    if (value.length === 0) {\n      return;\n    }\n\n    onSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        name=\"title\"\n        placeholder=\"What needs to be done?\"\n        autoComplete=\"off\"\n        value={value}\n        onChange={handleChange}\n      />\n    </form>\n  );\n};\n\nNewTodo.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, onToggle, onDelete, onSubmit }) => {\n  const { title, id, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [value, setValue] = useState(title);\n\n  const handleChange = (ev) => {\n    setValue(ev.target.value.trim());\n  };\n\n  const handleEditing = (ev) => {\n    switch (ev.key) {\n      case 'Enter':\n        if (value.length === 0) {\n          return;\n        }\n\n        onSubmit({ ...todo, title: value });\n        setIsEditing(false);\n        break;\n\n      case 'Escape':\n        setIsEditing(false);\n        setValue(title);\n        break;\n\n      default:\n        setValue(ev.target.value.trim());\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    if (value.length === 0) {\n      setIsEditing(false);\n    } else {\n      const changedTodo = { ...todo, title: value };\n\n      onSubmit(changedTodo);\n      setIsEditing(false);\n    }\n  };\n\n  return (\n    <li\n      key={id}\n      className={classNames({\n        completed,\n        editing: isEditing,\n      })}\n    >\n\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => onToggle(id)}\n        />\n\n        <label onDoubleClick={() => setIsEditing(true)}>\n          {title}\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onDelete(title)}\n        />\n      </div>\n\n      <input\n        className=\"edit\"\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        onKeyUp={handleEditing}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, onToggle, onDelete, onSubmit }) => (\n  <ul className=\"todo-list\">\n    {[...todos].map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        onToggle={onToggle}\n        onDelete={onDelete}\n        onSubmit={onSubmit}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({\n  handleShowAll,\n  handleShowActive,\n  handleShowCompleted,\n}) => {\n  const [isAllSelected, setIsAllSelected] = useState(true);\n  const [isActiveSelected, setIsActiveSelected] = useState(false);\n  const [isCompletedSelected, setIsCompletedSelected] = useState(false);\n\n  const showAll = () => {\n    setIsAllSelected(true);\n    setIsActiveSelected(false);\n    setIsCompletedSelected(false);\n    handleShowAll();\n  };\n\n  const showActive = () => {\n    setIsActiveSelected(true);\n    setIsAllSelected(false);\n    setIsCompletedSelected(false);\n    handleShowActive();\n  };\n\n  const showCompleted = () => {\n    setIsCompletedSelected(true);\n    setIsActiveSelected(false);\n    setIsAllSelected(false);\n    handleShowCompleted();\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={isAllSelected ? 'selected' : ''}\n          onClick={showAll}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={isActiveSelected ? 'selected' : ''}\n          onClick={showActive}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={isCompletedSelected ? 'selected' : ''}\n          onClick={showCompleted}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  handleShowAll: PropTypes.func.isRequired,\n  handleShowActive: PropTypes.func.isRequired,\n  handleShowCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { NewTodo } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nconst useLocalStorage = (key, initValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key))\n      || initValue,\n  );\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [isAllCompleted, setIsAllCompleted] = useState(false);\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  const [isFiltered, setIsFiltered] = useState(false);\n\n  const handleSubmit = (todoText) => {\n    setTodos([\n      ...todos,\n      { completed: false, id: +new Date(), title: todoText },\n    ]);\n  };\n\n  const handleToggleAll = () => {\n    if (isAllCompleted) {\n      setTodos(todos.map(todo => (\n        { ...todo, completed: false }\n      )));\n      setIsAllCompleted(false);\n    } else {\n      setTodos(todos.map(todo => (\n        { ...todo, completed: true }\n      )));\n      setIsAllCompleted(true);\n    }\n  };\n\n  const handleToggle = (id) => {\n    setTodos(todos.map(\n      todo => (todo.id === id\n        ? { ...todo, completed: !todo.completed }\n        : todo),\n    ));\n  };\n\n  const handleDelete = (title) => {\n    setTodos(todos.filter(todo => todo.title !== title));\n  };\n\n  const handleClear = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const handleShowAll = () => {\n    setIsFiltered(false);\n  };\n\n  const handleShowCompleted = () => {\n    setIsFiltered(true);\n    setFilteredTodos(todos.filter(todo => todo.completed));\n  };\n\n  const handleShowActive = () => {\n    setIsFiltered(true);\n    setFilteredTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const handleChangeTitle = (changedTodo) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === changedTodo.id) {\n        return changedTodo;\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodo onSubmit={handleSubmit} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={handleToggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={isFiltered\n            ? filteredTodos\n            : todos}\n          onToggle={handleToggle}\n          onDelete={handleDelete}\n          onSubmit={handleChangeTitle}\n        />\n\n      </section>\n\n      {todos.length > 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {[...todos].filter(todo => !todo.completed).length}\n              {' '}\n              items left\n            </span>\n\n            <TodosFilter\n              handleShowAll={handleShowAll}\n              handleShowCompleted={handleShowCompleted}\n              handleShowActive={handleShowActive}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={handleClear}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}