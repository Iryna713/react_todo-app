{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","onSubmit","useState","value","setValue","className","ev","preventDefault","length","type","name","placeholder","autoComplete","onChange","target","TodoItem","todo","onToggle","onDelete","title","id","completed","isEditing","setIsEditing","key","classNames","editing","checked","onDoubleClick","onClick","changedTodo","TodoList","todos","map","TodosFilter","handleShowAll","handleShowActive","handleShowCompleted","isAllSelected","setIsAllSelected","isActiveSelected","setIsActiveSelected","isCompletedSelected","setIsCompletedSelected","href","App","setTodos","isAllTrue","setIsAllTrue","filteredTodos","setFilteredTodos","isFiltered","setIsFiltered","useEffect","todoText","Date","htmlFor","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6157775f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = (ev) => {\n    setValue(ev.target.value);\n  };\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n\n    if (value.length === 0) {\n      return;\n    }\n\n    onSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        name=\"title\"\n        placeholder=\"What needs to be done?\"\n        autoComplete=\"off\"\n        value={value}\n        onChange={handleChange}\n      />\n    </form>\n  );\n};\n\nTodoApp.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, onToggle, onDelete, onSubmit }) => {\n  const { title, id, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [value, setValue] = useState(title);\n\n  const handleChange = (ev) => {\n    setValue(ev.target.value);\n  };\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n\n    if (value.length === 0) {\n      return;\n    }\n\n    const changedTodo = { ...todo, title: value };\n\n    onSubmit(changedTodo);\n    setValue('');\n    setIsEditing(false);\n  };\n\n  // const handleEditing = (ev) => {\n  //   switch (ev.key) {\n  //     case 'Enter':\n  //       if (value.length === 0) {\n  //         return;\n  //       }\n\n  //       const changedTodo = { ...todo, title: value };\n\n  //       onSubmit(changedTodo);\n  //       setValue('');\n  //       setIsEditing(false);\n  //       break;\n\n  //     case 'Escape':\n  //       setIsEditing(false);\n  //       break;\n\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  // const handleBlur = () => {\n  //   const changedTodo = { ...todo, title: value };\n\n  //   onSubmit(changedTodo);\n  //   setValue('');\n  //   setIsEditing(false);\n  // };\n\n  return (\n    <li\n      key={id}\n      className={classNames({\n        completed,\n        editing: isEditing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={!!completed}\n          onChange={() => onToggle(id)}\n        />\n\n        <label onDoubleClick={() => setIsEditing(true)}>\n          {title}\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onDelete(title)}\n        />\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"edit\"\n          type=\"text\"\n          value={value}\n          onChange={handleChange}\n          // onKeyUp={handleEditing}\n          // onBlur={handleBlur}\n        />\n      </form>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    completed: PropTypes.bool,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, onToggle, onDelete, onSubmit }) => (\n  <ul className=\"todo-list\">\n    {[...todos].map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        onToggle={onToggle}\n        onDelete={onDelete}\n        onSubmit={onSubmit}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    completed: PropTypes.bool,\n  })).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({\n  handleShowAll,\n  handleShowActive,\n  handleShowCompleted,\n}) => {\n  const [isAllSelected, setIsAllSelected] = useState(true);\n  const [isActiveSelected, setIsActiveSelected] = useState(false);\n  const [isCompletedSelected, setIsCompletedSelected] = useState(false);\n\n  const showAll = () => {\n    setIsAllSelected(true);\n    setIsActiveSelected(false);\n    setIsCompletedSelected(false);\n    handleShowAll();\n  };\n\n  const showActive = () => {\n    setIsActiveSelected(true);\n    setIsAllSelected(false);\n    setIsCompletedSelected(false);\n    handleShowActive();\n  };\n\n  const showCompleted = () => {\n    setIsCompletedSelected(true);\n    setIsActiveSelected(false);\n    setIsAllSelected(false);\n    handleShowCompleted();\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={isAllSelected ? 'selected' : ''}\n          onClick={showAll}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={isActiveSelected ? 'selected' : ''}\n          onClick={showActive}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={isCompletedSelected ? 'selected' : ''}\n          onClick={showCompleted}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  handleShowAll: PropTypes.func.isRequired,\n  handleShowActive: PropTypes.func.isRequired,\n  handleShowCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [isAllTrue, setIsAllTrue] = useState(false);\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  const [isFiltered, setIsFiltered] = useState(false);\n\n  useEffect(() => {\n\n  }, [todos]);\n\n  const handleSubmit = (todoText) => {\n    setTodos([\n      ...todos,\n      { completed: false, id: +new Date(), title: todoText },\n    ]);\n  };\n\n  const handleToggleAll = () => {\n    if (isAllTrue) {\n      setTodos([...todos].map(todo => (\n        { ...todo, completed: false }\n      )));\n      setIsAllTrue(false);\n    } else {\n      setTodos([...todos].map(todo => (\n        { ...todo, completed: true }\n      )));\n      setIsAllTrue(true);\n    }\n  };\n\n  const handleToggle = (id) => {\n    setTodos([...todos].map(\n      todo => (todo.id === id\n        ? { ...todo, completed: !todo.completed }\n        : todo),\n    ));\n  };\n\n  const handleDelete = (title) => {\n    setTodos([...todos].filter(todo => todo.title !== title));\n  };\n\n  const handleClear = () => {\n    setTodos([...todos].filter(todo => !todo.completed));\n  };\n\n  const handleShowAll = () => {\n    setIsFiltered(false);\n  };\n\n  const handleShowCompleted = () => {\n    setIsFiltered(true);\n    setFilteredTodos([...todos].filter(todo => todo.completed));\n  };\n\n  const handleShowActive = () => {\n    setIsFiltered(true);\n    setFilteredTodos([...todos].filter(todo => !todo.completed));\n  };\n\n  const handleChangeTitle = (changedTodo) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === changedTodo.id) {\n        return changedTodo;\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp onSubmit={handleSubmit} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={handleToggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={isFiltered\n            ? filteredTodos\n            : todos}\n          onToggle={handleToggle}\n          onDelete={handleDelete}\n          onSubmit={handleChangeTitle}\n        />\n\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {[...todos].filter(todo => !todo.completed).length}\n          {' '}\n          items left\n        </span>\n\n        <TodosFilter\n          handleShowAll={handleShowAll}\n          handleShowCompleted={handleShowCompleted}\n          handleShowActive={handleShowActive}\n        />\n\n        <button type=\"button\" className=\"clear-completed\" onClick={handleClear}>\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}